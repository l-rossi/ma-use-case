# Extracting Prolog Atoms with XML Annotation

You are an expert at identifying and extracting Prolog predicates from natural language compliance statements. Your task is to identify the basic predicates that would be needed to represent the statement logically, then annotate the original text with XML tags that trace each predicate back to its corresponding span. The extracted predicates will be used to reason over the statement in a Prolog environment. Specifically, they will be used to determine if a violation of the compliance statement has occurred given a set of facts. Predicates are wrapped in the atom tag which includes further information about the atom. Avoid Prolog literals and rather push information into the predicate. Prefer for example `is_thirty_years_old(X)` over `age(X, 30)`.

## Examples:

**Input:** "All employees must complete safety training before starting work."

**Output:**
<result>
<annotated>
All <atom id="1">employees</atom> must <atom id="2">complete safety training</atom> before <atom id="3">starting work</atom>.
</annotated>
<atoms>
<atom id="1">
<predicate>employee(X)</predicate>
<description>A person who works for the company</description>
<is_fact>true</is_fact>
</atom>
<atom id="2">
<predicate>completed_safety_training(X)</predicate>
<description>Person X has completed safety training</description>
<is_fact>true</is_fact>
</atom>
<atom id="3">
<predicate>started_work(X)</predicate>
<description>Person X has begun their work duties</description>
<is_fact>true</is_fact>
</atom>
</atoms>
</result>

**Input:** "Documents must be reviewed by two different people before publication."

**Output:**
<result>
<annotated>
<atom id="1">Documents</atom> must be <atom id="2">reviewed</atom> by two <atom id="4">different</atom> <atom id="4">people</atom> before <atom id="5">publication</atom>.
</annotated>
<atoms>
<atom id="1">
<predicate>document(X)</predicate>
<description>A written or digital file containing information</description>
<is_fact>true</is_fact>
</atom>
<atom id="2">
<predicate>reviewed_by(Document, Person)</predicate>
<description>A document that has been reviewed by a specific person</description>
<is_fact>true</is_fact>
</atom>
<atom id="3">
<predicate>different(X, Y)</predicate>
<description>Two people that are different.</description>
<is_fact>false</is_fact>
</atom>
<atom id="4">
<predicate>person(X)</predicate>
<description>An individual who can perform reviews</description>
<is_fact>true</is_fact>
</atom>
<atom id="5">
<predicate>published(X)</predicate>
<description>A document that has been made publicly available</description>
<is_fact>true</is_fact>
</atom>
</atoms>
</result>

## Instructions:
1. Read the compliance statement carefully
2. Identify which facts need to be provided to determine a violation.
3. Determine which Prolog literals (atoms) are needed to reason over these facts.
4. Wrap each relevant span with `<atom id="N">...</atom>` tags
5. Create appropriate Prolog atom names using snake_case
6. Use variables (X, Y, Person, etc.) for entities that would be instantiated
7. Include constants for specific values (amounts, types, etc.)
8. Ensure each atom id in the annotated text corresponds to an atom in the atoms section
9. Focus on atomic predicates, not complex rules
10. Make sure you combine duplicate atoms into one
11. For each atom, determine if it should be a fact or not:
   - Facts are basic properties or relationships that aren't derived from other rules, but rather provided as knowledge
   - Facts represent input data or environmental conditions
   - Facts would be asserted in a Prolog database rather than computed
   - Mark an atom as a fact by adding the Â´is_fact` tag with a value of `true` as demonstrated in the examples.
12. You must not wrap the output in a code block
13. The annotated text may not deviate from the original statement, except for the added `<atom>` tags
14. Violation will be determined for a specific instance in time.
15. Keep facts simple. Avoid unnecessary Prolog atoms, literals and variables.

Now extract atoms from the following compliance statement:

**Input:** {}
**Output:**